#
# http://www.cloudera.com/content/cloudera-content/cloudera-docs/CDH4/latest/CDH4-Installation-Guide/CDH4-Installation-Guide.html
#
---
- hosts: all
  vars_files:
    - networks.yml
    - vars/${inventory_hostname}.yml
    - vars/cdh4.yml

  vars:
    is_master: "'$inventory_hostname' == '$master'"
    is_backup: "'$inventory_hostname' == '$backup'"
    is_init: "'$init' == 'yes'"
    type: "sa"

  tasks:
### REDHAT
  - name: Download CDH4 key
    get_url: url={{url}}/{{key}} dest=/root/{{key}}
    when: ansible_os_family == "RedHat"
    tags:
      - packages
      - key

  - name: Import CDH4 key
    command: rpm --import /root/{{key}}
    when: ansible_os_family == "RedHat"
    tags:
      - packages
      - key

  - name: Download CDH4 repository
    get_url: url={{url}}/{{rpm}} dest=/root/{{rpm}}
    when: ansible_os_family == "RedHat"
    tags:
      - packages
      - key

  - name: Install CDH4 repository
    command: yum -y localinstall /root/{{rpm}}
    when: ansible_os_family == "RedHat"
    tags:
      - packages
      - repo

  - name: Install CDH4 extra repository
    get_url: url={{repo}} dest=/etc/yum.repos.d/cdh4-gplextras.repo
    when: ansible_os_family == "RedHat"
    tags:
      - packages
      - extra
      - repo

  - name: Install packages
    yum: name={{item}}
         state=installed
    with_items:
      - zookeeper-server
      - java-1.7.0-openjdk
    when: ansible_os_family == "RedHat"
    tags:
      - packages
      - zookeeper

### ZOOKEEPER
  - name: Fix data permissions
    file: path={{zookeeper.data}}
          owner=zookeeper
          group=zookeeper
          state=directory
          recurse=yes
    tags:
      - fix
      - directories
      - zookeeper

  - name: Install myid
    copy: content={{myid}}
          dest={{zookeeper.data}}/myid
    tags:
      - myid
      - config
      - zookeeper

  - name: Fix log permissions
    file: path={{zookeeper.log}}
          owner=zookeeper
          group=zookeeper
          state=directory
          recurse=yes
    tags:
      - fix
      - directories
      - zookeeper

  - name: Install zoo.cfg
    template: src=templates/etc/zookeeper/conf/zoo.cfg.j2
              dest=/etc/zookeeper/conf/zoo.cfg
              owner=root
              group=root
              backup=yes
    tags:
      - config
      - zookeeper
    notify:
      - Restart zookeeper

  - name: Install zktop
    git: repo=https://github.com/phunt/zktop.git
         dest=/opt/zktop
    tags:
      - zktop

  - name: Init zookeeper
    shell: service zookeeper-server init
    only_if: '$is_init'
    tags:
      - init

  - name: Start zookeeper
    service: name=zookeeper-server
             state=started
             enabled=yes

### YARN
#  - name: Stop services
#    service: name=hadoop-hdfs-secondarynamenode
#             state=stopped
#             enabled=no
#    when: ansible_os_family == "RedHat"
#    tags:
#      - uninstall
#
#  - name: Uninstall hadoop packages
#    yum: name={{item}}
#         state=absent
#    with_items:
#      - hadoop-hdfs-secondarynamenode
#    when: ansible_os_family == "RedHat"
#    tags:
#      - uninstall

  - name: Install hadoop packages
    yum: name={{item}}
         state=installed
    with_items:
      - hadoop-yarn-resourcemanager
      - hadoop-hdfs-namenode
      - hadoop-yarn-nodemanager
      - hadoop-hdfs-datanode
      - hadoop-mapreduce
      - hadoop-mapreduce-historyserver
      - hadoop-yarn-proxyserver
      - hadoop-client
      - hadoop-lzo-cdh4
      - hadoop-hdfs-zkfc
    when: ansible_os_family == "RedHat"
    tags:
      - hadoop
      - packages

### DATA PARTITION
  - name: Create Hadoop data partition
    lvol: vg={{hadoop.vg_root}}
          lv={{hadoop.lv_data}}
          size={{hadoop.lv_size}}
    tags:
      - partition
      - data
      - lvm

  - name: Create filesystem
    filesystem: fstype=xfs
                dev=/dev/{{hadoop.vg_root}}/{{hadoop.lv_data}}
    tags:
      - partition
      - fs

  - name: Creat mount dir
    file: path={{hadoop.lv_mnt}}
          state=directory
    tags:
      - partition
      - data

  - name: Mount hadoop data
    mount: name=${hadoop.lv_mnt}
           src=/dev/${hadoop.vg_root}/${hadoop.lv_data}
           fstype=xfs
           state=mounted
    tags:
      - partition
      - data
      - mount

  - name: Create hadoop directories
    file: path={{hadoop.lv_mnt}}/{{item}}
          state=directory
          owner=hdfs
          group=hdfs
          mode=0750
          recurse=yes
    with_items:
      - 1/dfs/dn
      - 1/dfs/nn
      - 1/dfs/mr
      - 2/dfs/dn
      - 2/dfs/nn
      - 2/dfs/mr
      - 3/dfs/dn
      - 3/dfs/nn
      - 3/dfs/mr
    tags:
      - directories

  - name: Create hadoop state
    file: path={{hadoop.state}}/{{item}}
          state=directory
          owner=hdfs
          group=hdfs
          mode=0750
          recurse=yes
    with_items:
      - dfs/nn
    only_if: '$is_master'
    tags:
      - directories
      - common

### HDFS CONFIGURATION
  - name: Install core-site
    template: src=templates/etc/hadoop/conf.{{type}}/core-site.xml.j2
              dest=/etc/hadoop/conf/core-site.xml
              backup=yes
    tags:
      - config
      - site

  - name: Install hdfs-site
    template: src=templates/etc/hadoop/conf.{{type}}/hdfs-site.xml.j2
              dest=/etc/hadoop/conf/hdfs-site.xml
              backup=yes
    tags:
      - config
      - site

  - name: Install ganglia monitor
    template: src=templates/etc/hadoop/conf.{{type}}/hadoop-metrics.properties.j2
              dest=/etc/hadoop/conf/hadoop-metrics.properties
              backup=yes
    tags:
      - config
      - site
      - ganglia

### MAPRED CONFIGURATION
  - name: Install mapred-site
    template: src=templates/etc/hadoop/conf.{{type}}/mapred-site.xml.j2
              dest=/etc/hadoop/conf/mapred-site.xml
              backup=yes
    tags:
      - config
      - mapred

  - name: Install yarn-site
    template: src=templates/etc/hadoop/conf.{{type}}/yarn-site.xml.j2
              dest=/etc/hadoop/conf/yarn-site.xml
              backup=yes
    tags:
      - config
      - yarn
      - mapred

  - name: Create hadoop directories
    file: path={{hadoop.lv_mnt}}/{{item}}
          state=directory
          owner=yarn
          group=yarn
          mode=0750
          recurse=yes
    with_items:
      - 1/yarn/local
      - 1/yarn/logs
      - 2/yarn/local
      - 2/yarn/logs
      - 3/yarn/local
      - 3/yarn/logs
    tags:
      - directories

### SCRIPTS
  - name: Install admin scripts
    template: src=templates/root/bin/{{item}}.j2
              dest=/root/bin/{{item}}
              mode=0700
    with_items:
      - hdfs_admin

### SERVICES
  - name: Disable services
    service: name={{item}}
             state=stopped
             enabled=no
    with_items:
      - hadoop-hdfs-datanode
      - hadoop-hdfs-namenode
      - hadoop-hdfs-zkfc
      - hadoop-mapreduce-historyserver
      - hadoop-yarn-nodemanager
      - hadoop-yarn-proxyserver
      - hadoop-yarn-resourcemanager

#  - name: Initializing the HA state in ZooKeeper
#    shell: hdfs zkfc -formatZK
#    only_if: '$is_init'
#    tags:
#      - config
#      - site

# master
# sudo -u hdfs hadoop namenode -format
# backup
# sudo -u hdfs hdfs namenode -bootstrapStandby 

  handlers:
    - name: Restart zookeeper
      service: name=zookeeper-server
               state=restarted

